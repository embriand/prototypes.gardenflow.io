import React from 'react';
import { RichTextEditor } from './RichTextEditor';
import { Button } from '../../components/ui/button';
import { Popover, PopoverContent, PopoverTrigger } from '../../components/ui/popover';

interface NotificationRichEditorProps {
  id: string;
  value: string;
  onChange: (value: string) => void;
  direction?: 'ltr' | 'rtl';
  height?: string;
}

const NotificationRichEditor: React.FC<NotificationRichEditorProps> = ({
  id,
  value,
  onChange,
  direction = 'ltr',
  height = '200px'
}) => {
  // Common emojis for notifications
  const notificationEmojis = ['üîî', 'üì¢', 'üí¨', '‚ÑπÔ∏è', '‚ö†Ô∏è', '‚úÖ', '‚ùå', '‚≠ê', 'üî•'];
  
  // Garden/plant related emojis
  const gardenEmojis = ['üå±', 'üåø', 'üçÉ', 'üå∑', 'üå∫', 'üåª', 'üåº', 'üå∏', 'üåπ', 'üçÄ', 'ü™¥', 'üåµ'];
  
  // Calendar/event related emojis
  const eventEmojis = ['üìÖ', '‚è∞', '‚åö', 'üìÜ', 'üïí', 'üìå', 'üìù', 'üóìÔ∏è'];
  
  // Common symbols and other useful emoji
  const symbolEmojis = ['üëç', 'üëè', '‚ù§Ô∏è', 'üéâ', 'üéØ', 'üöÄ', 'üí™', 'üèÜ', 'üîó', 'üìç'];

  const insertEmoji = (emoji: string) => {
    onChange(value + emoji);
  };

  return (
    <div className="space-y-2">
      <div className="flex flex-wrap gap-1.5 bg-slate-50 p-2.5 rounded-md border mb-2">
        <Popover>
          <PopoverTrigger asChild>
            <Button variant="outline" size="sm" className="h-8">
              üîî Notification
            </Button>
          </PopoverTrigger>
          <PopoverContent className="w-64">
            <div className="grid grid-cols-5 gap-1">
              {notificationEmojis.map((emoji, index) => (
                <Button 
                  key={index} 
                  variant="ghost" 
                  className="h-8 w-8 p-0"
                  onClick={() => insertEmoji(emoji)}
                >
                  <span className="text-xl">{emoji}</span>
                </Button>
              ))}
            </div>
          </PopoverContent>
        </Popover>

        <Popover>
          <PopoverTrigger asChild>
            <Button variant="outline" size="sm" className="h-8">
              üå± Jardin
            </Button>
          </PopoverTrigger>
          <PopoverContent className="w-64">
            <div className="grid grid-cols-5 gap-1">
              {gardenEmojis.map((emoji, index) => (
                <Button 
                  key={index} 
                  variant="ghost" 
                  className="h-8 w-8 p-0"
                  onClick={() => insertEmoji(emoji)}
                >
                  <span className="text-xl">{emoji}</span>
                </Button>
              ))}
            </div>
          </PopoverContent>
        </Popover>

        <Popover>
          <PopoverTrigger asChild>
            <Button variant="outline" size="sm" className="h-8">
              üìÖ √âv√©nements
            </Button>
          </PopoverTrigger>
          <PopoverContent className="w-64">
            <div className="grid grid-cols-5 gap-1">
              {eventEmojis.map((emoji, index) => (
                <Button 
                  key={index} 
                  variant="ghost" 
                  className="h-8 w-8 p-0"
                  onClick={() => insertEmoji(emoji)}
                >
                  <span className="text-xl">{emoji}</span>
                </Button>
              ))}
            </div>
          </PopoverContent>
        </Popover>

        <Popover>
          <PopoverTrigger asChild>
            <Button variant="outline" size="sm" className="h-8">
              üëç Symboles
            </Button>
          </PopoverTrigger>
          <PopoverContent className="w-64">
            <div className="grid grid-cols-5 gap-1">
              {symbolEmojis.map((emoji, index) => (
                <Button 
                  key={index} 
                  variant="ghost" 
                  className="h-8 w-8 p-0"
                  onClick={() => insertEmoji(emoji)}
                >
                  <span className="text-xl">{emoji}</span>
                </Button>
              ))}
            </div>
          </PopoverContent>
        </Popover>
      </div>

      <RichTextEditor
        id={id}
        value={value}
        onChange={onChange}
        direction={direction}
        height={height}
      />
    </div>
  );
};

export default NotificationRichEditor;